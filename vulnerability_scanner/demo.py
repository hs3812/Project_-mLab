from Nettacker.interface import *
import  os

if __name__  == "__main__":
	#The vulnerability scanner takes as input an IP address, or a list of IP addresses  to scan
	#The report will be saved in log_path, an absolute path or cwd
	
	target_to_scan = ['10.2.0.9']
	demo = Vulnerability_Scanner(target_to_scan,'scan_result.json')
	if demo.type1_scan(): #Returns  True  if there is vulnerability found during this  scan
		print()
		print('#'*50)
		print('Pre-defined vulnerability test/fast  scan  done!')
		print('Vulnerabilites found for this scan!')
		print('Now displaying the demo scan result json file: {}'.format(demo.log_in_file))
		data = json.load(open(demo.log_in_file))
		for item  in data:
			print('{}:{}    {}--->{}'.format(item['HOST'],item['PORT'],item['TYPE'],item['DESCRIPTION']))
				
	else:#No vulnerability found  so no need to parse json
		print()
		print('No vulnerabilities found after  fast scan')
	
	nmap_path = nmap3.get_nmap_path()
	#Vulscan requires nmap to run,  scan takes  3-5 min to complete depends on how  many ips are given
	if os.path.exists(nmap_path):
		
		if demo.type2_scan():#Returns True if  vulnerability found during  this scan
		
			#Parse json
			print('#'*50)
			for vulnerable_ips in demo.vuln_ip:#This vuln_ip stores vulnerable ips
				
				data = json.load(open('./'+vulnerable_ips+'.json'))
				print()
				print('These are all the  open ports  for '+vulnerable_ips+':')
				print(data['open_ports'].keys())
				print('An example of a port->service version and associated vulnerabilities:')
				print(vulnerable_ips+': Port 80/tcp -> '+data['open_ports']['80/tcp']['service'])
				print(data['open_ports']['80/tcp']['description'])
				print('\n'*2)
			
			print('Exiting.........')
			sys.exit(0)
																				
		else: #No need to parse json if no vulnerabilities
			print('Vulscan found no vulnerabilities!')
			print('Exiting.........')
			sys.exit(0)
		
		
	else:
		print('Please  install  nmap and  Vulscan with python3 vulscan_install.py ')
		raise nmap3.exceptions.NmapNotInstalledError()
		
		
	

	