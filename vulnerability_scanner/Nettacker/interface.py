from core.attack import __go_for_attacks as attack
from core.config import _core_config
from core.load_modules import load_all_modules
import nmap3
import socket
import shlex

#default config 
default_config = _core_config()

#this  function determines the host(running the script) ip address
def determine_host_ip():
    soc = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        soc.connect(('8.8.8.8', 1))
        ip = soc.getsockname()[0]
        soc.close()
        return ip

    except:#no internet connection
        print('time out!')
        soc.close()
        return False

#This discovers all live hosts  within a LAN
def host_discovery(ip):
    if ip.startswith('192') or ip.startswith('10'):
        nmap = nmap3.NmapHostDiscovery()
        result = nmap.nmap_no_portscan(ip + '/24')
    else:
        print('TODO network mask check, for /16 /8 or /22 addresses')

    return [h['addr'] for h in result['hosts']]

#This  scanner object takes as input an IP or a list of IPs to scan
#If no IP given, it  tries to detects live hosts and scan them all
class Vulnerability_Scanner():

    def __init__(self, target=None):
        for key, value in default_config.items():
            setattr(self, key, value)
        self.backup_ports = self.ports
        self.scan_method = load_all_modules()
        self.scan_method.remove('all')

        if target is None:
            ip = determine_host_ip()
            if ip:
                self.targets = host_discovery(ip)
            else:
                print('Host IP address detection failed, check internet connection')
                print('try manually enter the IP address of the machine running this test')


        else:
            if isinstance(target, list):
                self.targets = target
            else:
                self.targets = [target]
        self.verbose_level = 5

    def type1_scan(self):#this scans for a pre-defined  set of vulnerabilities
        if attack(self.targets, self.check_ranges, self.check_subdomains, self.log_in_file, self.time_sleep,
                  self.language, self.verbose_level,
                  self.retries,
                  self.socks_proxy, self.users, self.passwds, self.timeout_sec, self.thread_number, self.ports,
                  self.ping_flag, self.methods_args,
                  self.backup_ports, self.scan_method, self.thread_number_host, self.graph_flag, self.profile, False):
            print('Type 1 scan results save in the log file {}'.format(self.log_in_file))
    def type2_scan(self):#This  uses nmap to determin service first,then  lookup cve locally
        nmap = nmap3.NmapScanTechniques()
        for target in self.targets:
            print('Running tests  against :'+target)
            print('Please wait........')
            cmd =  'nmap --script=vulscan/vulscan.nse -sV '+target
            result = nmap.run_command(shlex.split(cmd))
            with open('./'+target+'.txt','w')  as fp:
                fp.write(result)
            print('Tests against '+target+' done, report saved  in ./'+target+'.txt')














